{"version":3,"sources":["components/Header.js","components/List.js","components/Section.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["styles","headerStyle","background","headingStyle","fontSize","Header","react_default","a","createElement","style","className","List","props","rons","map","item","key","id","alt","src","url","sectionStyles","Section","components_List","navbarStyle","Navbar","href","App","components_Navbar","components_Header","components_Section","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAUMA,oBAAS,CACbC,YAAa,CACXC,WAAY,UAEdC,aAAc,CACZC,SAAU,OAcCC,MARf,WACE,OACEC,EAAAC,EAAAC,cAAA,UAAQC,MAAOT,EAAOC,YAAaS,UAAU,UAC3CJ,EAAAC,EAAAC,cAAA,MAAIC,MAAOT,EAAOG,cAAlB,qCCRSQ,MAbf,SAAcC,GACZ,OACEN,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACXE,EAAMC,KAAKC,IAAI,SAAAC,GAAI,OAIlBT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKD,EAAKE,GAAIC,IAAKH,EAAKE,GAAIE,IAAKJ,EAAKK,UCL7CP,EAAO,CACX,CACEI,GAAI,EACJG,IAAK,yHAEP,CACEH,GAAI,EACJG,IAAK,yHAEP,CACEH,GAAI,EACJG,IAAK,yHAEP,CACEH,GAAI,EACJG,IAAK,yHAEP,CACEH,GAAI,EACJG,IAAK,yHAEP,CACEH,GAAI,EACJG,IAAK,0HAWHpB,EAAS,CACbqB,cAAe,CACbnB,WAAY,cAeDoB,MATf,WACE,OACEhB,EAAAC,EAAAC,cAAA,WAASC,MAAOT,EAAOqB,cAAeX,UAAU,WAC9CJ,EAAAC,EAAAC,cAAA,0EACAF,EAAAC,EAAAC,cAACe,EAAD,CAAMV,KAAMA,MCzCZb,SAAS,CACbwB,YAAa,CACXtB,WAAY,kBAcDuB,MARf,WACE,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,MAAOT,EAAOwB,YAAad,UAAU,UACxCJ,EAAAC,EAAAC,cAAA,KAAGkB,KAAK,KAAR,iBCLSC,MAVf,WACE,OACErB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4e4615b6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Header.css\";\n\n// By importing the Header.css file, it is added to the DOM whenever this component loads\n\n// We can also style a component inside of its JavaScript file by adding style properties to its rendered elements\n// Unlike regular HTML, a JSX style property must be an object instead of a string\n// On a style object, we camelCase all property names, and put all of the values in quotes\n// Non quoted values default to \"pixels\", e.g. height, margin, padding\n\nconst styles = {\n  headerStyle: {\n    background: \"maroon\"\n  },\n  headingStyle: {\n    fontSize: 100\n  }\n};\n\n// We use JSX curly braces to evaluate the style object\n\nfunction Header() {\n  return (\n    <header style={styles.headerStyle} className=\"header\">\n      <h1 style={styles.headingStyle}>The Burgundy Clicky Game!</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\n// Whenever we try to render an array containing JSX, React knows to render each JSX element separately\nfunction List(props) {\n  return (\n    <ul className=\"list-group\">\n      {props.rons.map(item => (\n        // <li className=\"list-group-item\" key={item.id}>\n        //   {item.name}\n        // </li>\n        <img key={item.id} alt={item.id} src={item.url}></img>\n      ))}\n    </ul>\n  );\n}\n\nexport default List;\n","import React from \"react\";\nimport \"../styles/Section.css\";\nimport List from \"./List\";\n// import url from \"../../public/assets/images\"\n\nconst rons = [\n  {\n    id: 1,\n    url: \"https://content.screencast.com/users/ConnorConnorF/folders/Snagit/media/0a1dd196-f079-4a98-ac37-b21b1059e5c4/ron1.png\",\n  },\n  {\n    id: 2,\n    url: \"https://content.screencast.com/users/ConnorConnorF/folders/Snagit/media/a21677fe-3386-4bdf-9e2c-cb5d47c8c43a/ron2.png\",\n  },\n  {\n    id: 3,\n    url: \"https://content.screencast.com/users/ConnorConnorF/folders/Snagit/media/a17ef3ea-9adf-4b68-833f-00b9670e6bf9/ron6.png\",\n  },\n  {\n    id: 4,\n    url: \"https://content.screencast.com/users/ConnorConnorF/folders/Snagit/media/06a1a659-18bd-48dc-a508-a925ea82bddc/ron5.png\",\n  },\n  {\n    id: 5,\n    url: \"https://content.screencast.com/users/ConnorConnorF/folders/Snagit/media/29b96fbe-5d6b-4edf-8181-74e086df2cad/ron4.png\",\n  },\n  {\n    id: 6,\n    url: \"https://content.screencast.com/users/ConnorConnorF/folders/Snagit/media/ce075896-dd8e-4840-884c-518bd4a22d07/ron3.png\",\n  }\n];\n\n// By importing the Section.css file, it is added to the DOM whenever this component loads\n\n// We can also style a component inside of its JavaScript file by adding style properties to its rendered elements\n// Unlike regular HTML, a JSX style property must be an object instead of a string\n// On a style object, we camelCase all property names, and put all of the values in quotes\n// Non quoted values default to \"pixels\", e.g. height, margin, padding\n\nconst styles = {\n  sectionStyles: {\n    background: \"lightgray\"\n  }\n};\n\n// We use JSX curly braces to evaluate the style object on the JSX tag\n\nfunction Section() {\n  return (\n    <section style={styles.sectionStyles} className=\"section\">\n      <h2>Click on a ron to score, but don't click the same one twice!</h2>\n      <List rons={rons} />\n    </section>\n  );\n}\n\nexport default Section;\n","import React from \"react\";\nimport \"../styles/Navbar.css\";\n\n// By importing the Navbar.css file, it is added to the DOM whenever this component loads\n\n// We can also style a component inside of its JavaScript file by adding style properties to its rendered elements\n// Unlike regular HTML, a JSX style property must be an object instead of a string\n// On a style object, we camelCase all property names, and put all of the values in quotes\n// Non quoted values default to \"pixels\", e.g. height, margin, padding\n\nconst styles = {\n  navbarStyle: {\n    background: \"LightSkyBlue\",\n  }\n};\n\n// We use JSX curly braces to evaluate the style object on the JSX tag\n\nfunction Navbar() {\n  return (\n    <nav style={styles.navbarStyle} className=\"navbar\">\n      <a href=\"/\">Click-a-Ron</a>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Section from \"./components/Section\";\nimport Navbar from \"./components/Navbar\";\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Header />\n      <Section />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}